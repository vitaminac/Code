-- 1. Implementación de la Base de Datos Relacional en SQL
CREATE TABLE PERSONAJE_GENERICO (
  CODIGO_PG   CHAR(3) PRIMARY KEY,   -- Los personajes genéricos se identifican por un código (3 dígitos)
  NOMBRE      VARCHAR2(10) NOT NULL, -- tienen un nombre (10 caracteres)
  APODO       VARCHAR2(10) NOT NULL, -- un apodo (10 caracteres)
  DESCRIPCION VARCHAR2(255)          -- una descripción (255 caracteres)
);

CREATE TABLE HABILIDAD (
  CODIGO_H    CHAR(3) PRIMARY KEY,   -- Las habilidades tendrán un código (3 dígitos)
  NOMBRE      VARCHAR2(20) NOT NULL, -- un nombre (20 caracteres)
  -- una categoría (cuyos valores posibles son Fuerza, Velocidad, Puntería y Otras)
  CATEGORIA   VARCHAR2(9)  NOT NULL,
  DESCRIPCION VARCHAR2(50),          -- una breve descripción (50 caracteres
  COSTE       NUMBER(6)    NOT NULL,  -- un coste en oro (6 dígitos)
  CONSTRAINT CHECK_CATEGORIA CHECK (CATEGORIA IN ('Fuerza', 'Velocidad', 'Punteria', 'Otras'))
);

CREATE TABLE PG_TIENE_H (
  CODIGO_PG CHAR(3) REFERENCES PERSONAJE_GENERICO ON DELETE CASCADE,
  CODIGO_H  CHAR(3) REFERENCES HABILIDAD ON DELETE CASCADE,
  PUNTOS    INTEGER CHECK (PUNTOS > 0),
  CONSTRAINT PG_TIENE_H_KEY PRIMARY KEY (CODIGO_PG, CODIGO_H)
);

CREATE TABLE ESCENARIO (
  CODIGO_ES   CHAR(6) PRIMARY KEY,          -- Los escenarios tienen un código (6 dígitos)
  DESCRIPCION VARCHAR2(50),                 -- y una descripción (50 caracteres)
  URL_MAPA    VARCHAR2(255) UNIQUE NOT NULL -- Cada escenario lleva un mapa asociado almacenado en forma de una URL.
);

CREATE TABLE HAB_NECESARIA (
  HABILIDAD         CHAR(3) REFERENCES HABILIDAD ON DELETE CASCADE,
  H_NECESARIA       CHAR(3) REFERENCES HABILIDAD ON DELETE CASCADE,
  PUNTOS_NECESARIOS INTEGER NOT NULL,
  CONSTRAINT POSITIVE_POINT CHECK (PUNTOS_NECESARIOS > 0),
  CONSTRAINT HAB_NECESARIA_KEY PRIMARY KEY (HABILIDAD, H_NECESARIA)
);

CREATE TABLE USUARIO (
  ID_U              CHAR(10) PRIMARY KEY,  -- un identificador (10 dígitos)
  NOMBRE            VARCHAR2(50) NOT NULL, -- nombre completo (50 caracteres)
  APODO             VARCHAR2(20) NOT NULL, -- apodo(20 caracteres)
  PAIS              VARCHAR2(20) NOT NULL, -- país de origen (20 caracteres)
  IBAN              CHAR(24)     NOT NULL, -- código IBAN de la cuenta corriente
  ORO               NUMBER(8) DEFAULT 0,   -- oro disponible(8 dígitos, dos de los cuales son decimales)
  -- el oro le servirá al usuario para adquirir habilidades o mejorar las que tengan sus personajes.
  CONTRASENA        VARCHAR2(32) NOT NULL, -- y contraseńa (puede suponer que la contraseńa se almacenará en una cadena de 32 caracteres encriptada).
  CODIGO_PG_CAPITAN CHAR(3)   DEFAULT NULL,
  CODIGO_PJ_CAPITAN CHAR(12)  DEFAULT NULL,
  CONSTRAINT POSITIVE_ORO CHECK (ORO >= 0)
);

CREATE TABLE PERSONAJE_JUGADOR (
  CODIGO_PG CHAR(3) REFERENCES PERSONAJE_GENERICO, --  el código del personaje genérico
  CODIGO_PJ CHAR(12),                              -- más un código propio (12 dígitos)
  NOMBRE    VARCHAR2(32) NOT NULL,                 -- un nombre propio (que le asigna el usuario).
  ID_U      CHAR(10)     NOT NULL REFERENCES USUARIO ON DELETE CASCADE,
  CONSTRAINT PERSONAJE_JUGADOR_KEY PRIMARY KEY (CODIGO_PG, CODIGO_PJ)
);

ALTER TABLE USUARIO
  ADD CONSTRAINT USUARIO_REF_PJ
    FOREIGN KEY (CODIGO_PG_CAPITAN, CODIGO_PJ_CAPITAN) REFERENCES PERSONAJE_JUGADOR ON DELETE SET NULL;

CREATE TABLE PJ_TIENE_HABIL (
  CODIGO_PG CHAR(3),
  CODIGO_PJ CHAR(12),
  CODIGO_H  CHAR(3) REFERENCES HABILIDAD,
  PUNTOS    INTEGER NOT NULL,
  CONSTRAINT PJ_T_H_REF_PJ FOREIGN KEY (CODIGO_PG, CODIGO_PJ) REFERENCES PERSONAJE_JUGADOR ON DELETE CASCADE,
  CONSTRAINT PJ_TIENE_HABIL_KEY PRIMARY KEY (CODIGO_PG, CODIGO_PJ, CODIGO_H),
  CONSTRAINT POSITIVE_POINTS CHECK (PUNTOS > 0)
);

CREATE TABLE EQUIPO (
  CODIGO_EQ      CHAR(10) PRIMARY KEY,         --  Los equipos tienen un código (10 dígitos),
  NOMBRE         VARCHAR2(20) UNIQUE NOT NULL, -- un nombre (20 caracteres, único)
  FECHA_CREACION DATE                NOT NULL, -- una fecha de creación.
  --  formado por 5 jugadores (usuarios)
  ID_U1          CHAR(10)            NOT NULL REFERENCES USUARIO,
  ID_U2          CHAR(10)            NOT NULL REFERENCES USUARIO,
  ID_U3          CHAR(10)            NOT NULL REFERENCES USUARIO,
  ID_U4          CHAR(10)            NOT NULL REFERENCES USUARIO,
  ID_U5          CHAR(10)            NOT NULL REFERENCES USUARIO
);

CREATE TABLE PARTIDA (
  CODIGO_P          CHAR(20) PRIMARY KEY,                    -- De cada partida se guardará un código (20 dígitos)
  -- participan 2 equipos,
  CODIGO_EQ1        CHAR(10) NOT NULL REFERENCES EQUIPO,
  CODIGO_EQ2        CHAR(10) NOT NULL REFERENCES EQUIPO,
  CODIGO_EQ_GANADOR CHAR(10) DEFAULT NULL REFERENCES EQUIPO, -- qué equipo ha resultado ganador
  CODIGO_ES         CHAR(6)  NOT NULL REFERENCES ESCENARIO,  -- Una partida tiene lugar en un escenario
  FECHAINI          DATE     NOT NULL,                       -- la fecha de inicio
  FECHAFIN          DATE                                     -- y finalización (cuando termine)
);

-- 2. Inserción de datos
-- PERSONAJE_GENERICO y habilidades de los personaje genericos
INSERT INTO PERSONAJE_GENERICO
VALUES (000, 'SUPP', 'SUPP', 'APOYO');
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (000, 'RegeneracióndeVida', 'Otras', NULL, 0);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (000, 000, 1);

INSERT INTO PERSONAJE_GENERICO
VALUES (001, 'TANK', 'TANQUE', 'TANQUEA');
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (001, 'escudo', 'Otras', NULL, 0);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (001, 001, 1);

INSERT INTO PERSONAJE_GENERICO
VALUES (002, 'ADC', 'TIRADOR', 'MATA');
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (002, 'ataque basico', 'Fuerza', NULL, 0);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (002, 002, 1);

INSERT INTO PERSONAJE_GENERICO
VALUES (003, 'MAGO', 'MAGO', 'MAGIA');
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (003, 'rayo de energía', 'Punteria', NULL, 0);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (003, 003, 1);

INSERT INTO PERSONAJE_GENERICO
VALUES (004, 'ASESINO', 'ASESINO', 'ASESINO');
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (004, 'invisible', 'Otras', NULL, 0);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (004, 004, 1);

-- Zed
INSERT INTO PERSONAJE_GENERICO (CODIGO_PG, NOMBRE, APODO, DESCRIPCION)
VALUES (005, 'Zed', 'Shadows', 'El equilibrio es una mentira. Nosotros somos los auténticos ninjas');
INSERT INTO HABILIDAD
VALUES (051, 'Contemptfor the Weak', 'Fuerza', 'basic attacks deal 10% of target''s maximum health', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (005, 051, 4);
INSERT INTO HABILIDAD
VALUES (052, 'Razor Shuriken', 'Punteria', 'throws his spinning blades forward', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (005, 052, 4);
INSERT INTO HABILIDAD
VALUES (053, 'Living Shadow', 'Otras', 'Zed''s shadow dashes forward, they can swap places', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (005, 053, 4);
INSERT INTO HABILIDAD
VALUES (054, 'Death Mark', 'Fuerza', 'becomes untargetable and dashes to an enemy', 1);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (054, 051, 2);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (054, 052, 2);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (054, 053, 2);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (005, 054, 3);

-- Lee Sin
INSERT INTO PERSONAJE_GENERICO (CODIGO_PG, NOMBRE, APODO, DESCRIPCION)
VALUES (006, 'Lee Sin', 'Ciego', 'Los actos de una sola persona pueden destruir el mundo, pero los esfuerzos de muchas pueden reconstruirlo');
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (061, 'Golpe resonante', 'Fuerza', 'onda sonora para localizar y se abalanza', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (006, 061, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (062, 'Voluntad de hierro', 'Otras', 'genera un escudo que lo protege del daño', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (006, 062, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (063, 'Tempestad ', 'Fuerza', 'golpea el suelo y provoca una onda de choque', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (006, 063, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (064, 'Ira del dragón', 'Fuerza', 'una potente patada giratoria', 1);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (064, 061, 2);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (064, 062, 2);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (064, 063, 2);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (006, 064, 3);

-- Ezreal
INSERT INTO PERSONAJE_GENERICO (CODIGO_PG, NOMBRE, APODO, DESCRIPCION)
VALUES (007, 'Ezreal', 'Explorador', 'El Explorador Pródigo');
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (071, 'Disparo místico', 'Punteria', 'un haz de energía', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (007, 071, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (072, 'Flujo de esencia', 'Punteria', 'una onda de energía fluctuante', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (007, 072, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (073, 'Alteración arcana', 'Velocidad', 'se teleporta a una ubicación cercana', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (007, 073, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (074, 'Andanada certera', 'Punteria', 'una potente andanada de proyectiles de energía', 1);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (074, 071, 2);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (074, 072, 2);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (074, 073, 2);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (007, 074, 3);

-- Garen
INSERT INTO PERSONAJE_GENERICO (CODIGO_PG, NOMBRE, APODO, DESCRIPCION)
VALUES (008, 'Garen', 'Demacia', 'El Poder de Demacia');
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (081, 'Golpe decisivo', 'Fuerza', 'ataque vital', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (008, 081, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (082, 'Coraje', 'Otras', 'recibir una gran mejora de Tenacidad', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (008, 082, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (083, 'Juicio', 'Fuerza', 'girar con su espada infligiendo daño', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (008, 083, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (084, 'Justicia demaciana', 'Fuerza', 'invoca el poder de Demacia', 1);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (084, 081, 2);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (084, 082, 2);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (084, 083, 2);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (008, 084, 3);

-- Annie
INSERT INTO PERSONAJE_GENERICO (CODIGO_PG, NOMBRE, APODO, DESCRIPCION)
VALUES (009, 'Annie', 'Oscuridad', 'Nunca juego con cerillas');
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (091, 'Desintegración', 'Punteria', 'una bola de fuego', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (009, 091, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (092, 'Incineración', 'Punteria', 'un abrasador cono de fuego', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (009, 092, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (093, 'Escudo fundido', 'Otras', 'los enemigos que les golpeen reciben danos', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (009, 093, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (094, 'Tibbers', 'Fuerza', 'Annie da vida a su oso Tibbers', 1);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (094, 091, 2);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (094, 092, 2);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (094, 093, 2);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (009, 094, 3);

-- Jarvan IV
INSERT INTO PERSONAJE_GENERICO (CODIGO_PG, NOMBRE, APODO, DESCRIPCION)
VALUES (010, 'Jarvan IV', 'Jarvan IV', 'Las palabras pueden hacer al gobernante, pero solo las acciones hacen historia');
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (101, 'Golpe del dragón', 'Fuerza', 'proyecta su lanza ante sí', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (010, 101, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (102, 'Protección áurea', 'Otras', 'Invoca a los antiguos reyes de Demacia', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (010, 102, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (103, 'Estandarte demaciano', 'Punteria', 'el orgullo de Demacia', 1);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (010, 103, 4);
INSERT INTO HABILIDAD (CODIGO_H, NOMBRE, CATEGORIA, DESCRIPCION, COSTE)
VALUES (104, 'Cataclismo', 'Velocidad', 'salta heroicamente al combate', 3);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (104, 101, 2);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (104, 102, 2);
INSERT INTO HAB_NECESARIA (HABILIDAD, H_NECESARIA, PUNTOS_NECESARIOS)
VALUES (104, 103, 2);
INSERT INTO PG_TIENE_H (CODIGO_PG, CODIGO_H, PUNTOS)
VALUES (010, 104, 3);

-- SK Telecom
-- faker mid
INSERT INTO USUARIO (ID_U, NOMBRE, APODO, PAIS, IBAN, ORO, CONTRASENA, CODIGO_PG_CAPITAN, CODIGO_PJ_CAPITAN)
VALUES (1000000000, 'Lee Sang-hyeok', 'faker', 'Korea', '123456789012345678901230', 5000, '123456', NULL, NULL);
INSERT INTO PERSONAJE_JUGADOR (CODIGO_PG, CODIGO_PJ, NOMBRE, ID_U)
VALUES (005, 1000000000, 'Zed-faker', 1000000000);
UPDATE USUARIO
SET CODIGO_PG_CAPITAN = 005,
    CODIGO_PJ_CAPITAN = 1000000000
WHERE ID_U = 1000000000;

-- TBA top
INSERT INTO USUARIO (ID_U, NOMBRE, APODO, PAIS, IBAN, CONTRASENA, ORO, CODIGO_PG_CAPITAN, CODIGO_PJ_CAPITAN)
VALUES (1000000002, 'TBA', 'TBA', 'Korea', '123456789012345678901230', '123456', 0, NULL, NULL);
INSERT INTO PERSONAJE_JUGADOR (CODIGO_PG, CODIGO_PJ, NOMBRE, ID_U)
VALUES (006, 1000000002, 'Lee Sin - TBA', 1000000002);
INSERT INTO PERSONAJE_JUGADOR (CODIGO_PG, CODIGO_PJ, NOMBRE, ID_U)
VALUES (008, 1000000002, 'Garen - TBA', 1000000002);
UPDATE USUARIO
SET CODIGO_PG_CAPITAN = 008,
    CODIGO_PJ_CAPITAN = 1000000002
WHERE ID_U = 1000000002;

-- Bang adc
INSERT INTO USUARIO (ID_U, NOMBRE, APODO, PAIS, IBAN, ORO, CONTRASENA, CODIGO_PG_CAPITAN, CODIGO_PJ_CAPITAN)
VALUES (1000000003, 'Jun-sik', 'Bang', 'Korea', '123456789012345678901230', 5000, '123456', NULL, NULL);
INSERT INTO PERSONAJE_JUGADOR (CODIGO_PG, CODIGO_PJ, NOMBRE, ID_U)
VALUES (007, 1000000003, 'Ez Bang', 1000000003);
UPDATE USUARIO
SET CODIGO_PG_CAPITAN = 007,
    CODIGO_PJ_CAPITAN = 1000000003
WHERE ID_U = 1000000003;

-- Blank jungle
INSERT INTO USUARIO (ID_U, NOMBRE, APODO, PAIS, IBAN, CONTRASENA, ORO, CODIGO_PG_CAPITAN, CODIGO_PJ_CAPITAN)
VALUES (1000000004, 'Sun-gu', 'Blank', 'Korea', '123456789012345678901230', '123465', 0, NULL, NULL);
INSERT INTO PERSONAJE_JUGADOR (CODIGO_PG, CODIGO_PJ, NOMBRE, ID_U)
VALUES (008, 1000000004, 'Garen - Blank', 1000000004);
UPDATE USUARIO
SET CODIGO_PG_CAPITAN = 008,
    CODIGO_PJ_CAPITAN = 1000000004
WHERE ID_U = 1000000004;

-- Wolf Support
INSERT INTO USUARIO (ID_U, NOMBRE, APODO, PAIS, IBAN, CONTRASENA, ORO, CODIGO_PG_CAPITAN, CODIGO_PJ_CAPITAN)
VALUES (1000000005, 'Jae-wan', 'Wolf', 'Korea', '123456789012345678901230', '1321', 0, NULL, NULL);
INSERT INTO PERSONAJE_JUGADOR (CODIGO_PG, CODIGO_PJ, NOMBRE, ID_U)
VALUES (009, 1000000005, 'Annie Wolf', 1000000005);
UPDATE USUARIO
SET CODIGO_PG_CAPITAN = 009,
    CODIGO_PJ_CAPITAN = 1000000005
WHERE ID_U = 1000000005;

INSERT INTO EQUIPO (CODIGO_EQ, NOMBRE, FECHA_CREACION, ID_U1, ID_U2, ID_U3, ID_U4, ID_U5)
VALUES (55, 'SK Telecom', PARSEDATETIME('01/01/2013', 'DD/MM/YYYY'), 1000000000, 1000000002, 1000000003, 1000000004, 1000000005);
-- SK Telecom

INSERT INTO ESCENARIO (CODIGO_ES, DESCRIPCION, URL_MAPA)
VALUES (000001, 'La Grieta del Invocador', 'https://euw.leagueoflegends.com/es/game-info/game-modes/summoners-rift/');
INSERT INTO ESCENARIO (CODIGO_ES, DESCRIPCION, URL_MAPA)
VALUES (000002, 'El Bosque Retorcido', 'https://euw.leagueoflegends.com/es/game-info/game-modes/the-twisted-treeline/');
INSERT INTO ESCENARIO (CODIGO_ES, DESCRIPCION, URL_MAPA)
VALUES (000003, 'El Abismo de los Lamentos', 'https://euw.leagueoflegends.com/es/game-info/game-modes/howling-abyss/');

-- Team we
-- Condi jungle
INSERT INTO USUARIO (ID_U, NOMBRE, APODO, PAIS, IBAN, CONTRASENA, ORO, CODIGO_PG_CAPITAN, CODIGO_PJ_CAPITAN)
VALUES (1000000006, 'RenJie Xiang', 'Condi', 'China', '123456789012345678901230', '123', 0, NULL, NULL);
INSERT INTO PERSONAJE_JUGADOR (CODIGO_PG, CODIGO_PJ, NOMBRE, ID_U)
VALUES (010, 1000000006, 'Jarvan IV Condi', 1000000006);
UPDATE USUARIO
SET CODIGO_PG_CAPITAN = 010,
    CODIGO_PJ_CAPITAN = 1000000006
WHERE ID_U = 1000000006;

-- weixiao adc
INSERT INTO USUARIO (ID_U, NOMBRE, APODO, PAIS, IBAN, ORO, CONTRASENA, CODIGO_PG_CAPITAN, CODIGO_PJ_CAPITAN)
VALUES (1000000001, 'Gao Xue-Cheng', 'weixiao', 'China', '123456789012345678901230', 5000, '123456', NULL, NULL);
INSERT INTO PERSONAJE_JUGADOR (CODIGO_PG, CODIGO_PJ, NOMBRE, ID_U)
VALUES (007, 1000000001, 'weixiao Ez', 1000000001);
UPDATE USUARIO
SET CODIGO_PG_CAPITAN = 007,
    CODIGO_PJ_CAPITAN = 1000000001
WHERE ID_U = 1000000001;

-- xiye mid
INSERT INTO USUARIO (ID_U, NOMBRE, APODO, PAIS, IBAN, CONTRASENA, ORO, CODIGO_PG_CAPITAN, CODIGO_PJ_CAPITAN)
VALUES (1000000007, 'Han Wei Su', 'xiye', 'China', '123456789012345678901230', '1234', 0, NULL, NULL);
INSERT INTO PERSONAJE_JUGADOR (CODIGO_PG, CODIGO_PJ, NOMBRE, ID_U)
VALUES (009, 1000000007, 'Annie XIYE', 1000000007);
UPDATE USUARIO
SET CODIGO_PG_CAPITAN = 009,
    CODIGO_PJ_CAPITAN = 1000000007
WHERE ID_U = 1000000007;

-- 957 TOP
INSERT INTO USUARIO (ID_U, NOMBRE, APODO, PAIS, IBAN, CONTRASENA, ORO, CODIGO_PG_CAPITAN, CODIGO_PJ_CAPITAN)
VALUES (1000000008, 'Chang Yu Ke', '957', 'China', '123456789012345678901230', '123', 0, NULL, NULL);
INSERT INTO PERSONAJE_JUGADOR (CODIGO_PG, CODIGO_PJ, NOMBRE, ID_U)
VALUES (009, 1000000008, 'Annie 957', 1000000008);
UPDATE USUARIO
SET CODIGO_PG_CAPITAN = 009,
    CODIGO_PJ_CAPITAN = 1000000008
WHERE ID_U = 1000000008;

-- Ben Support
INSERT INTO USUARIO (ID_U, NOMBRE, APODO, PAIS, IBAN, CONTRASENA, ORO, CODIGO_PG_CAPITAN, CODIGO_PJ_CAPITAN)
VALUES (1000000009, 'DongHyun Nam', 'Ben', 'Korea', '123456789012345678901230', '123', 0, NULL, NULL);
INSERT INTO PERSONAJE_JUGADOR (CODIGO_PG, CODIGO_PJ, NOMBRE, ID_U)
VALUES (009, 1000000009, 'Annie Ben support', 1000000009);
UPDATE USUARIO
SET CODIGO_PG_CAPITAN = 009,
    CODIGO_PJ_CAPITAN = 1000000009
WHERE ID_U = 1000000009;

INSERT INTO EQUIPO (CODIGO_EQ, NOMBRE, FECHA_CREACION, ID_U1, ID_U2, ID_U3, ID_U4, ID_U5)
VALUES (86, 'Team WE', PARSEDATETIME('01/01/2011', 'DD/MM/YYYY'), 1000000006, 1000000001, 1000000007, 1000000008, 1000000009);
-- Team we

-- USUARIO Y EQUIPO
INSERT INTO USUARIO
VALUES (1000000019, 'JI-MIN KWON', 'Wraith', 'Korea', '123456789012345678901234', 5000, '12346', NULL, NULL);
INSERT INTO USUARIO
VALUES (1000000012, 'Seong-Jin Lee', 'Cuvee', 'Korea', '123456789012345678901234', 5000, '12346', NULL, NULL);
INSERT INTO USUARIO
VALUES (1000000013, 'Min-Ho Lee', 'Crown', 'Korea', '123456789012345678901234', 5000, '12346', NULL, NULL);
INSERT INTO USUARIO
VALUES (1000000014, 'Chan-Yong Kang', 'Ambition', 'Korea', '123456789012345678901234', 5000, '12346', NULL, NULL);
INSERT INTO USUARIO
VALUES (1000000015, 'Yong-in Jo', 'CoreJJ', 'Korea', '123456789012345678901234', 5000, '12346', NULL, NULL);
INSERT INTO EQUIPO
VALUES (10, 'Samsung Galaxy', PARSEDATETIME('02/10/2007', 'DD/MM/YYYY'), 1000000019, 1000000012, 1000000013, 1000000014, 1000000015);

INSERT INTO USUARIO (ID_U, NOMBRE, APODO, PAIS, IBAN, CONTRASENA, ORO)
VALUES (108, 'usuario espanol', 'espanol', 'ESPANA', '123456789012345678901230', '123', 2222);
INSERT INTO PERSONAJE_JUGADOR (CODIGO_PG, CODIGO_PJ, NOMBRE, ID_U)
VALUES (002, 108, 'puntos por debajo de la media', 108);
UPDATE USUARIO
SET CODIGO_PG_CAPITAN = 002,
    CODIGO_PJ_CAPITAN = 108
WHERE ID_U = 108;
SELECT *
FROM PJ_TIENE_HABIL;

INSERT INTO PARTIDA (CODIGO_P, CODIGO_EQ1, CODIGO_EQ2, CODIGO_EQ_GANADOR, CODIGO_ES, FECHAINI, FECHAFIN)
VALUES (1, 55, 10, NULL, 1, PARSEDATETIME('25/12/2013', 'DD/MM/YYYY'), PARSEDATETIME('25/12/2014', 'DD/MM/YYYY'));
INSERT INTO PARTIDA (CODIGO_P, CODIGO_EQ1, CODIGO_EQ2, CODIGO_EQ_GANADOR, CODIGO_ES, FECHAINI, FECHAFIN)
VALUES (2, 55, 86, NULL, 2, PARSEDATETIME('25/12/2013', 'DD/MM/YYYY'), PARSEDATETIME('25/12/2015', 'DD/MM/YYYY'));
INSERT INTO PARTIDA (CODIGO_P, CODIGO_EQ1, CODIGO_EQ2, CODIGO_EQ_GANADOR, CODIGO_ES, FECHAINI, FECHAFIN)
VALUES (3, 10, 86, NULL, 3, PARSEDATETIME('25/12/2013', 'DD/MM/YYYY'), PARSEDATETIME('25/12/2016', 'DD/MM/YYYY'));

-- 3. Utilizando sentencias para la modificación del esquema, recoja las siguientes restricciones

-- 3.1.
-- Ańada una restricción con nombre que impida
-- que la fecha de inicio de una partida pueda ser posterior a la fecha de finalización.
ALTER TABLE PARTIDA
  ADD CONSTRAINT CHECK_FECHA_ORDEN CHECK (FECHAFIN IS NULL OR FECHAFIN >= FECHAINI);

-- 3.2 Recoja que dos usuarios no pueden tener el mismo apodo
ALTER TABLE USUARIO
  ADD CONSTRAINT APODO_NO_REPETIDO UNIQUE (APODO);

-- 3.4 Modifique el esquema para permitir guardar un nuevo campo obligatorio
-- que guarde el correo electrónico de todos los usuarios.
ALTER TABLE USUARIO
  ADD EMAIL VARCHAR2(50) DEFAULT NULL;
UPDATE USUARIO
SET EMAIL = 'example@example.com';
ALTER TABLE USUARIO
  ALTER COLUMN EMAIL SET NOT NULL;

-- y compruebe que la modificación ha sido realizada, mostrando la estructura de la tabla tras la modificación.
SELECT *
FROM USUARIO;

-- 3.5
-- Añada una restricción que garantice que el equipo ganador de una partida,
-- o es nulo, o es alguno de los participantes en la misma.
ALTER TABLE PARTIDA
  ADD CONSTRAINT GANADOR_ES_PARTICIPANTE CHECK (
    CODIGO_EQ_GANADOR IS NULL OR CODIGO_EQ_GANADOR IN (CODIGO_EQ1, CODIGO_EQ2)
    );

-- 4 Actualización de datos

-- 4.1 Modifique la puntuación de la habilidad de algún Personaje de Jugador de los que haya insertado previamente.
UPDATE PJ_TIENE_HABIL HAB
SET HAB.PUNTOS = 6
WHERE exists(SELECT NULL
             FROM PERSONAJE_JUGADOR PJ
             WHERE PJ.NOMBRE = 'Zed-faker'
               AND HAB.CODIGO_PG = PJ.CODIGO_PG
               AND HAB.CODIGO_PJ = PJ.CODIGO_PJ);

SELECT *
FROM PJ_TIENE_HABIL
       NATURAL JOIN
     PERSONAJE_JUGADOR PJ;

-- 4.2 Duplique el coste de las habilidaded de la categoria "Velocudad"
UPDATE HABILIDAD
SET COSTE = 2 * COSTE
WHERE CATEGORIA = 'Velocidad';

SELECT *
FROM HABILIDAD
WHERE CATEGORIA = 'Velocidad';

-- 4.3 incremente en 100 unidades el oro de los usuarios españoles
UPDATE USUARIO
SET ORO = ORO + 100
WHERE PAIS = 'ESPANA';

SELECT *
FROM USUARIO
ORDER BY PAIS;

-- 4.4 Modifique la puntuación de las habilidades de los personajes de usuario,
-- de tal forma que se incremente en 1 la de aquellos cuya puntuación esté por debajo de la media.
UPDATE PJ_TIENE_HABIL
SET PUNTOS = PUNTOS + 1
WHERE (PUNTOS < (
  SELECT avg(PUNTOS)
  FROM PJ_TIENE_HABIL));

SELECT PJ.NOMBRE NOMBRE_CAMPEON,
       H.NOMBRE  NOMBRE_HABILIDAD,
       PUNTOS
FROM PJ_TIENE_HABIL
       INNER JOIN
     PERSONAJE_JUGADOR PJ
     ON PJ_TIENE_HABIL.CODIGO_PG = PJ.CODIGO_PG AND PJ_TIENE_HABIL.CODIGO_PJ = PJ.CODIGO_PJ
       INNER JOIN
     HABILIDAD H
     ON PJ_TIENE_HABIL.CODIGO_H = H.CODIGO_H
ORDER BY PUNTOS;

-- 4.5 Elimine los usuarios que no hayan jugado ninguna partida.
DELETE
FROM USUARIO
WHERE ID_U NOT IN (
  SELECT DISTINCT U.ID_U
  FROM PARTIDA P
         INNER JOIN EQUIPO EQ
                    ON EQ.CODIGO_EQ IN (P.CODIGO_EQ1, P.CODIGO_EQ2)
         INNER JOIN USUARIO U
                    ON U.ID_U IN (EQ.ID_U1, EQ.ID_U2, EQ.ID_U3, EQ.ID_U4, EQ.ID_U5));

WITH NUM_P AS (
  SELECT U.ID_U,
         count(P.CODIGO_P) AS NUM_P
  FROM USUARIO U
         INNER JOIN EQUIPO EQ
                    ON U.ID_U IN (EQ.ID_U1, EQ.ID_U2, EQ.ID_U3, EQ.ID_U4, EQ.ID_U5)
         INNER JOIN PARTIDA P
                    ON EQ.CODIGO_EQ IN (P.CODIGO_EQ1, P.CODIGO_EQ2)
  GROUP BY U.ID_U
)
SELECT U.NOMBRE,
       coalesce(NUM_P.NUM_P, 0) NUMERO_PARTIDAS
FROM USUARIO U
       LEFT JOIN NUM_P
                 ON U.ID_U = NUM_P.ID_U
ORDER BY NUMERO_PARTIDAS;

-- 5. Creación de vista

-- 5.1. Cree una vista que contenga todas las habilidades que sean necesarias
-- para otras habilidades (es decir, todos los datos de una habilidad,
-- todos los datos de la habilidad necesaria para tener la primera, y los puntos necesarios).
-- Intente insertar una nueva fila en la vista.
CREATE VIEW HABILIDAD_MAS_INFO_EXTRA AS
  SELECT DISTINCT * FROM (
       SELECT *
       FROM
            HAB_NECESARIA NECESARIA
              LEFT OUTER JOIN
            HABILIDAD
              ON NECESARIA.HABILIDAD = HABILIDAD.CODIGO_H
  );

SELECT *
FROM HABILIDAD_MAS_INFO_EXTRA;

-- no es posiblel insertar a una tabla que contenga columnas virtuales

-- 5.2. Cree una vista con tres columnas: nombre de usuario,
-- número de equipos de los que forma parte y número de partidas que ha jugado.
CREATE VIEW USUARIO_NUM_OF_EQ_AND_P AS
  SELECT *
  FROM (
    WITH U_EQ_P AS (
        SELECT
          U.ID_U ID_U,
          count(DISTINCT EQ.CODIGO_EQ) NUM_EQ,
          count(DISTINCT P.CODIGO_P)   NUM_P
        FROM
          USUARIO U INNER JOIN EQUIPO EQ
            ON U.ID_U IN (EQ.ID_U1, EQ.ID_U2, EQ.ID_U3, EQ.ID_U4, EQ.ID_U5)
          INNER JOIN PARTIDA P
            ON EQ.CODIGO_EQ IN (P.CODIGO_EQ1, P.CODIGO_EQ2)
        GROUP BY U.ID_U
    ) SELECT
        U.NOMBRE,
        coalesce(U_EQ_P.NUM_EQ, 0) AS NUMERO_EQUIPOS,
        coalesce(U_EQ_P.NUM_P, 0)  AS NUMERO_PARTIDAS
      FROM USUARIO U LEFT JOIN U_EQ_P
          ON U.ID_U = U_EQ_P.ID_U)
  ORDER BY NOMBRE;

SELECT *
FROM USUARIO_NUM_OF_EQ_AND_P;

-- Consulte la vista, añada un nuevo usuario y vuelva a consultar la vista
INSERT INTO USUARIO (ID_U, NOMBRE, APODO, PAIS, IBAN, CONTRASENA, EMAIL)
VALUES (26, 'Z', 'EL Z', 'CHINA', 0000000000000000000011, '123456', 'asd@gmail.com');

SELECT *
FROM
  USUARIO_NUM_OF_EQ_AND_P;

-- 6. Resuelva las siguientes consultas sin utilizar vistas:

-- 6.1. Nombre de los usuarios de España
INSERT INTO USUARIO (ID_U, NOMBRE, APODO, PAIS, IBAN, CONTRASENA, ORO, EMAIL) VALUES (108, 'usuario espanol', 'espanol', 'ESPANA', '123456789012345678901230', '123', 2222, 'email');

SELECT NOMBRE
FROM USUARIO
WHERE PAIS = 'ESPANA';

-- 6.2. Habilidades que no posee ningún personaje de jugador.
SELECT *
FROM HABILIDAD
WHERE CODIGO_H NOT IN (
  SELECT CODIGO_H
  FROM PJ_TIENE_HABIL
  );

-- 6.3 Usuarios que no estén en ningún equipo.
SELECT *
FROM USUARIO
WHERE NOT exists(SELECT NULL
                 FROM EQUIPO
                 WHERE ID_U IN (ID_U1, ID_U2, ID_U3, ID_U4, ID_U5));

-- 6.4 Nombre de cada usuario y número de partidas jugadas.
SELECT
  U.NOMBRE,
  count(CASE WHEN CODIGO_P IS NOT NULL
               THEN 1 END) AS NUMERO_DE_PARTIDAS
FROM USUARIO U
       LEFT JOIN EQUIPO E
                 ON U.ID_U IN (E.ID_U1, E.ID_U2, E.ID_U3, E.ID_U4, E.ID_U5)
       LEFT JOIN PARTIDA P
                 ON E.CODIGO_EQ IN (P.CODIGO_EQ1, P.CODIGO_EQ2)
GROUP BY U.NOMBRE
ORDER BY NUMERO_DE_PARTIDAS ASC, NOMBRE ASC;

-- 6.5. Partidas y días transcurridos  desde  su  finalización  hasta  hoy  (utilice  la  función SYSDATE).
SELECT
  CODIGO_P,
  to_char(sysdate - P.FECHAFIN)
FROM PARTIDA P;

-- 6.6 País cuyos usuarios tienen, en total, más oro.
SELECT PAIS
FROM (
       SELECT PAIS
       FROM USUARIO
       GROUP BY PAIS
       ORDER BY sum(ORO) DESC)
WHERE ROWNUM = 1;

-- 7. Modificación del esquema

-- 7.1. Añada las tablas necesarias para almacenar:
-- la puntuación (en puntos de habilidades) obtenida por cada jugador en cada partida
-- y el oro acumulado (o perdido) por cada jugador en la misma,
-- así como la cantidad de vida con la que terminó
-- cada uno de los personajes del jugador al terminar la partida
CREATE TABLE ESTADO_FINAL_PARTIDA (
  PARTIDA    CHAR(20) REFERENCES PARTIDA,
  ID_U       CHAR(10) REFERENCES USUARIO,
  ORO_OB     NUMBER(8) NOT NULL,
  VIDA_FINAL INT NOT NULL,
  PRIMARY KEY (PARTIDA, ID_U),
  CONSTRAINT POSITIVE_VIDA CHECK (VIDA_FINAL >= 0)
);

SELECT * FROM ESTADO_FINAL_PARTIDA;

CREATE TABLE PUNTUACION_OB (
PARTIDA   CHAR(20),
ID_U      CHAR(10),
HABILIDAD CHAR(3) REFERENCES HABILIDAD,
PUNTOS    INTEGER NOT NULL,
PRIMARY KEY (PARTIDA, ID_U, HABILIDAD),
FOREIGN KEY (PARTIDA, ID_U) REFERENCES ESTADO_FINAL_PARTIDA,
CONSTRAINT POSITIVE_POINTS_PUNTUACION_OB CHECK (PUNTOS >= 0)
);

SELECT * FROM PUNTUACION_OB;

-- 7.2. Cree una tabla con nombre HISTORICO_Partidas_Terminadas con la misma estructura
-- que la tabla de Partidas que contenga la información sobre las partidas terminadas.
-- Utilice para ello una única sentencia SQL.
CREATE TABLE HISTORICO_PARTIDAS_TERMINADAS AS
SELECT *
FROM PARTIDA
WHERE FECHAFIN IS NOT NULL AND (FECHAFIN < sysdate);

SELECT *
FROM HISTORICO_PARTIDAS_TERMINADAS;